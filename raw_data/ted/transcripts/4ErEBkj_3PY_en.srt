1
0:00:20.566,000 --> 0:00:21,000
Good morning.

2
0:00:22.853,000 --> 0:00:26,000
I'm here today to talk about autonomous flying beach balls.

3
0:00:27.03,000 --> 0:00:28,000
(Laughter)

4
0:00:28.062,000 --> 0:00:3,000
No, agile aerial robots like this one.

5
0:00:31.624,000 --> 0:00:34,000
I'd like to tell you a little bit about the challenges in building these,

6
0:00:35.108,000 --> 0:00:38,000
and some of the terrific opportunities for applying this technology.

7
0:00:38.957,000 --> 0:00:42,000
So these robots are related to unmanned aerial vehicles.

8
0:00:44.199,000 --> 0:00:46,000
However, the vehicles you see here are big.

9
0:00:47.318,000 --> 0:00:5,000
They weigh thousands of pounds, are not by any means agile.

10
0:00:50.611,000 --> 0:00:51,000
They're not even autonomous.

11
0:00:52.886,000 --> 0:00:56,000
In fact, many of these vehicles are operated by flight crews

12
0:00:57.092,000 --> 0:00:59,000
that can include multiple pilots,

13
0:00:59.676,000 --> 0:01:01,000
operators of sensors,

14
0:01:01.906,000 --> 0:01:02,000
and mission coordinators.

15
0:01:03.922,000 --> 0:01:05,000
What we're interested in is developing robots like this --

16
0:01:06.689,000 --> 0:01:07,000
and here are two other pictures --

17
0:01:08.403,000 --> 0:01:1,000
of robots that you can buy off the shelf.

18
0:01:11.11,000 --> 0:01:14,000
So these are helicopters with four rotors,

19
0:01:14.418,000 --> 0:01:17,000
and they're roughly a meter or so in scale,

20
0:01:18.132,000 --> 0:01:19,000
and weigh several pounds.

21
0:01:20.076,000 --> 0:01:23,000
And so we retrofit these with sensors and processors,

22
0:01:23.455,000 --> 0:01:25,000
and these robots can fly indoors.

23
0:01:25.685,000 --> 0:01:26,000
Without GPS.

24
0:01:27.457,000 --> 0:01:28,000
The robot I'm holding in my hand

25
0:01:29.369,000 --> 0:01:3,000
is this one,

26
0:01:31.043,000 --> 0:01:34,000
and it's been created by two students,

27
0:01:34.21,000 --> 0:01:35,000
Alex and Daniel.

28
0:01:36.493,000 --> 0:01:39,000
So this weighs a little more than a tenth of a pound.

29
0:01:39.632,000 --> 0:01:41,000
It consumes about 15 watts of power.

30
0:01:42.235,000 --> 0:01:44,000
And as you can see, it's about eight inches in diameter.

31
0:01:46.33,000 --> 0:01:48,000
So let me give you just a very quick tutorial

32
0:01:48.949,000 --> 0:01:49,000
on how these robots work.

33
0:01:51.043,000 --> 0:01:52,000
So it has four rotors.

34
0:01:52.26,000 --> 0:01:54,000
If you spin these rotors at the same speed,

35
0:01:54.332,000 --> 0:01:55,000
the robot hovers.

36
0:01:56.42,000 --> 0:01:59,000
If you increase the speed of each of these rotors,

37
0:02:00.08,000 --> 0:02:02,000
then the robot flies up, it accelerates up.

38
0:02:02.643,000 --> 0:02:04,000
Of course, if the robot were tilted,

39
0:02:05.099,000 --> 0:02:06,000
inclined to the horizontal,

40
0:02:06.433,000 --> 0:02:08,000
then it would accelerate in this direction.

41
0:02:09.686,000 --> 0:02:1,000
So to get it to tilt,

42
0:02:11.123,000 --> 0:02:13,000
there's one of two ways of doing it.

43
0:02:13.24,000 --> 0:02:16,000
So in this picture, you see that rotor four is spinning faster

44
0:02:16.9,000 --> 0:02:17,000
and rotor two is spinning slower.

45
0:02:18.892,000 --> 0:02:19,000
And when that happens,

46
0:02:20.476,000 --> 0:02:23,000
there's a moment that causes this robot to roll.

47
0:02:24.495,000 --> 0:02:25,000
And the other way around,

48
0:02:25.774,000 --> 0:02:3,000
if you increase the speed of rotor three and decrease the speed of rotor one,

49
0:02:31.377,000 --> 0:02:32,000
then the robot pitches forward.

50
0:02:33.82,000 --> 0:02:34,000
And then finally,

51
0:02:35.012,000 --> 0:02:37,000
if you spin opposite pairs of rotors

52
0:02:37.93,000 --> 0:02:38,000
faster than the other pair,

53
0:02:39.646,000 --> 0:02:41,000
then the robot yaws about the vertical axis.

54
0:02:42.391,000 --> 0:02:43,000
So an on-board processor

55
0:02:43.875,000 --> 0:02:46,000
essentially looks at what motions need to be executed

56
0:02:47.206,000 --> 0:02:48,000
and combines these motions,

57
0:02:49.2,000 --> 0:02:52,000
and figures out what commands to send to the motors --

58
0:02:52.334,000 --> 0:02:53,000
600 times a second.

59
0:02:53.77,000 --> 0:02:54,000
That's basically how this thing operates.

60
0:02:56.247,000 --> 0:02:58,000
So one of the advantages of this design

61
0:02:58.413,000 --> 0:02:59,000
is when you scale things down,

62
0:03:00.336,000 --> 0:03:02,000
the robot naturally becomes agile.

63
0:03:03.194,000 --> 0:03:07,000
So here, R is the characteristic length of the robot.

64
0:03:07.281,000 --> 0:03:08,000
It's actually half the diameter.

65
0:03:09.595,000 --> 0:03:13,000
And there are lots of physical parameters that change as you reduce R.

66
0:03:14.968,000 --> 0:03:16,000
The one that's most important is the inertia,

67
0:03:17.623,000 --> 0:03:18,000
or the resistance to motion.

68
0:03:19.568,000 --> 0:03:23,000
So it turns out the inertia, which governs angular motion,

69
0:03:24.068,000 --> 0:03:26,000
scales as a fifth power of R.

70
0:03:27.046,000 --> 0:03:28,000
So the smaller you make R,

71
0:03:28.766,000 --> 0:03:3,000
the more dramatically the inertia reduces.

72
0:03:31.956,000 --> 0:03:33,000
So as a result, the angular acceleration,

73
0:03:34.915,000 --> 0:03:36,000
denoted by the Greek letter alpha here,

74
0:03:36.978,000 --> 0:03:37,000
goes as 1 over R.

75
0:03:38.621,000 --> 0:03:39,000
It's inversely proportional to R.

76
0:03:40.374,000 --> 0:03:42,000
The smaller you make it, the more quickly you can turn.

77
0:03:44.219,000 --> 0:03:45,000
So this should be clear in these videos.

78
0:03:46.204,000 --> 0:03:5,000
On the bottom right, you see a robot performing a 360-degree flip

79
0:03:50.687,000 --> 0:03:51,000
in less than half a second.

80
0:03:52.656,000 --> 0:03:54,000
Multiple flips, a little more time.

81
0:03:56.259,000 --> 0:03:57,000
So here the processes on board

82
0:03:58.164,000 --> 0:04:01,000
are getting feedback from accelerometers and gyros on board,

83
0:04:01.372,000 --> 0:04:03,000
and calculating, like I said before,

84
0:04:03.514,000 --> 0:04:04,000
commands at 600 times a second,

85
0:04:05.347,000 --> 0:04:06,000
to stabilize this robot.

86
0:04:07.607,000 --> 0:04:1,000
So on the left, you see Daniel throwing this robot up into the air,

87
0:04:10.981,000 --> 0:04:12,000
and it shows you how robust the control is.

88
0:04:13.032,000 --> 0:04:14,000
No matter how you throw it,

89
0:04:14.366,000 --> 0:04:16,000
the robot recovers and comes back to him.

90
0:04:18.881,000 --> 0:04:19,000
So why build robots like this?

91
0:04:21.079,000 --> 0:04:23,000
Well, robots like this have many applications.

92
0:04:24.198,000 --> 0:04:26,000
You can send them inside buildings like this,

93
0:04:26.693,000 --> 0:04:29,000
as first responders to look for intruders,

94
0:04:30.304,000 --> 0:04:33,000
maybe look for biochemical leaks,

95
0:04:33.629,000 --> 0:04:34,000
gaseous leaks.

96
0:04:35.102,000 --> 0:04:38,000
You can also use them for applications like construction.

97
0:04:38.84,000 --> 0:04:42,000
So here are robots carrying beams, columns

98
0:04:43.388,000 --> 0:04:44,000
and assembling cube-like structures.

99
0:04:45.26,000 --> 0:04:47,000
I'll tell you a little bit more about this.

100
0:04:48.695,000 --> 0:04:5,000
The robots can be used for transporting cargo.

101
0:04:51.583,000 --> 0:04:54,000
So one of the problems with these small robots

102
0:04:54.72,000 --> 0:04:56,000
is their payload-carrying capacity.

103
0:04:56.745,000 --> 0:04:59,000
So you might want to have multiple robots carry payloads.

104
0:05:00.746,000 --> 0:05:02,000
This is a picture of a recent experiment we did --

105
0:05:03.125,000 --> 0:05:04,000
actually not so recent anymore --

106
0:05:04.744,000 --> 0:05:06,000
in Sendai, shortly after the earthquake.

107
0:05:07.938,000 --> 0:05:1,000
So robots like this could be sent into collapsed buildings,

108
0:05:11.153,000 --> 0:05:13,000
to assess the damage after natural disasters,

109
0:05:14.068,000 --> 0:05:15,000
or sent into reactor buildings,

110
0:05:15.674,000 --> 0:05:16,000
to map radiation levels.

111
0:05:19.583,000 --> 0:05:22,000
So one fundamental problem that the robots have to solve

112
0:05:23.128,000 --> 0:05:24,000
if they are to be autonomous,

113
0:05:24.731,000 --> 0:05:27,000
is essentially figuring out how to get from point A to point B.

114
0:05:28.937,000 --> 0:05:29,000
So this gets a little challenging,

115
0:05:30.628,000 --> 0:05:33,000
because the dynamics of this robot are quite complicated.

116
0:05:33.659,000 --> 0:05:35,000
In fact, they live in a 12-dimensional space.

117
0:05:36.524,000 --> 0:05:37,000
So we use a little trick.

118
0:05:37.992,000 --> 0:05:4,000
We take this curved 12-dimensional space,

119
0:05:41.429,000 --> 0:05:44,000
and transform it into a flat, four-dimensional space.

120
0:05:45.347,000 --> 0:05:48,000
And that four-dimensional space consists of X, Y, Z,

121
0:05:48.442,000 --> 0:05:49,000
and then the yaw angle.

122
0:05:49.878,000 --> 0:05:5,000
And so what the robot does,

123
0:05:51.26,000 --> 0:05:54,000
is it plans what we call a minimum-snap trajectory.

124
0:05:56.209,000 --> 0:05:57,000
So to remind you of physics:

125
0:05:57.63,000 --> 0:05:59,000
You have position, derivative, velocity;

126
0:05:59.708,000 --> 0:06:,000
then acceleration;

127
0:06:01.588,000 --> 0:06:03,000
and then comes jerk,

128
0:06:03.713,000 --> 0:06:04,000
and then comes snap.

129
0:06:05.578,000 --> 0:06:07,000
So this robot minimizes snap.

130
0:06:08.8,000 --> 0:06:09,000
So what that effectively does,

131
0:06:10.26,000 --> 0:06:12,000
is produce a smooth and graceful motion.

132
0:06:12.908,000 --> 0:06:14,000
And it does that avoiding obstacles.

133
0:06:16.313,000 --> 0:06:19,000
So these minimum-snap trajectories in this flat space are then transformed

134
0:06:19.9,000 --> 0:06:22,000
back into this complicated 12-dimensional space,

135
0:06:23.249,000 --> 0:06:25,000
which the robot must do for control and then execution.

136
0:06:26.749,000 --> 0:06:27,000
So let me show you some examples

137
0:06:28.313,000 --> 0:06:3,000
of what these minimum-snap trajectories look like.

138
0:06:31.114,000 --> 0:06:32,000
And in the first video,

139
0:06:32.289,000 --> 0:06:34,000
you'll see the robot going from point A to point B,

140
0:06:35.042,000 --> 0:06:36,000
through an intermediate point.

141
0:06:36.99,000 --> 0:06:38,000
(Whirring noise)

142
0:06:43.377,000 --> 0:06:46,000
So the robot is obviously capable of executing any curve trajectory.

143
0:06:47.022,000 --> 0:06:48,000
So these are circular trajectories,

144
0:06:48.76,000 --> 0:06:5,000
where the robot pulls about two G's.

145
0:06:52.844,000 --> 0:06:55,000
Here you have overhead motion capture cameras on the top

146
0:06:56.57,000 --> 0:06:59,000
that tell the robot where it is 100 times a second.

147
0:06:59.8,000 --> 0:07:01,000
It also tells the robot where these obstacles are.

148
0:07:03.14,000 --> 0:07:04,000
And the obstacles can be moving.

149
0:07:04.72,000 --> 0:07:07,000
And here, you'll see Daniel throw this hoop into the air,

150
0:07:07.871,000 --> 0:07:09,000
while the robot is calculating the position of the hoop,

151
0:07:10.554,000 --> 0:07:12,000
and trying to figure out how to best go through the hoop.

152
0:07:14.002,000 --> 0:07:15,000
So as an academic,

153
0:07:15.26,000 --> 0:07:17,000
we're always trained to be able to jump through hoops

154
0:07:17.812,000 --> 0:07:18,000
to raise funding for our labs,

155
0:07:19.321,000 --> 0:07:2,000
and we get our robots to do that.

156
0:07:21.26,000 --> 0:07:27,000
(Applause)

157
0:07:28.524,000 --> 0:07:29,000
So another thing the robot can do

158
0:07:30.159,000 --> 0:07:32,000
is it remembers pieces of trajectory

159
0:07:32.26,000 --> 0:07:34,000
that it learns or is pre-programmed.

160
0:07:35.466,000 --> 0:07:39,000
So here, you see the robot combining a motion that builds up momentum,

161
0:07:40.26,000 --> 0:07:42,000
and then changes its orientation and then recovers.

162
0:07:44.004,000 --> 0:07:46,000
So it has to do this because this gap in the window

163
0:07:46.988,000 --> 0:07:49,000
is only slightly larger than the width of the robot.

164
0:07:51.05,000 --> 0:07:53,000
So just like a diver stands on a springboard

165
0:07:53.827,000 --> 0:07:55,000
and then jumps off it to gain momentum,

166
0:07:56.304,000 --> 0:07:59,000
and then does this pirouette, this two and a half somersault through

167
0:07:59.557,000 --> 0:08:,000
and then gracefully recovers,

168
0:08:00.983,000 --> 0:08:01,000
this robot is basically doing that.

169
0:08:02.705,000 --> 0:08:05,000
So it knows how to combine little bits and pieces of trajectories

170
0:08:05.809,000 --> 0:08:07,000
to do these fairly difficult tasks.

171
0:08:10.018,000 --> 0:08:11,000
So I want change gears.

172
0:08:11.26,000 --> 0:08:14,000
So one of the disadvantages of these small robots is its size.

173
0:08:15.654,000 --> 0:08:16,000
And I told you earlier

174
0:08:16.83,000 --> 0:08:18,000
that we may want to employ lots and lots of robots

175
0:08:19.203,000 --> 0:08:21,000
to overcome the limitations of size.

176
0:08:22.01,000 --> 0:08:23,000
So one difficulty is:

177
0:08:23.608,000 --> 0:08:25,000
How do you coordinate lots of these robots?

178
0:08:26.425,000 --> 0:08:27,000
And so here, we looked to nature.

179
0:08:28.544,000 --> 0:08:32,000
So I want to show you a clip of Aphaenogaster desert ants,

180
0:08:33.176,000 --> 0:08:36,000
in Professor Stephen Pratt's lab, carrying an object.

181
0:08:36.588,000 --> 0:08:37,000
So this is actually a piece of fig.

182
0:08:38.327,000 --> 0:08:4,000
Actually you take any object coated with fig juice,

183
0:08:40.751,000 --> 0:08:42,000
and the ants will carry it back to the nest.

184
0:08:42.866,000 --> 0:08:45,000
So these ants don't have any central coordinator.

185
0:08:46.487,000 --> 0:08:47,000
They sense their neighbors.

186
0:08:48.058,000 --> 0:08:5,000
There's no explicit communication.

187
0:08:50.367,000 --> 0:08:51,000
But because they sense the neighbors

188
0:08:52.13,000 --> 0:08:53,000
and because they sense the object,

189
0:08:53.93,000 --> 0:08:55,000
they have implicit coordination across the group.

190
0:08:57.474,000 --> 0:09:,000
So this is the kind of coordination we want our robots to have.

191
0:09:01.569,000 --> 0:09:05,000
So when we have a robot which is surrounded by neighbors --

192
0:09:06.371,000 --> 0:09:08,000
and let's look at robot I and robot J --

193
0:09:08.624,000 --> 0:09:09,000
what we want the robots to do,

194
0:09:10.196,000 --> 0:09:12,000
is to monitor the separation between them,

195
0:09:12.331,000 --> 0:09:13,000
as they fly in formation.

196
0:09:14.537,000 --> 0:09:15,000
And then you want to make sure

197
0:09:16.042,000 --> 0:09:18,000
that this separation is within acceptable levels.

198
0:09:19.303,000 --> 0:09:21,000
So again, the robots monitor this error

199
0:09:21.795,000 --> 0:09:25,000
and calculate the control commands 100 times a second,

200
0:09:25.968,000 --> 0:09:27,000
which then translates into motor commands,

201
0:09:28.015,000 --> 0:09:29,000
600 times a second.

202
0:09:29.254,000 --> 0:09:32,000
So this also has to be done in a decentralized way.

203
0:09:32.785,000 --> 0:09:34,000
Again, if you have lots and lots of robots,

204
0:09:35.143,000 --> 0:09:38,000
it's impossible to coordinate all this information centrally

205
0:09:38.444,000 --> 0:09:41,000
fast enough in order for the robots to accomplish the task.

206
0:09:41.645,000 --> 0:09:45,000
Plus, the robots have to base their actions only on local information --

207
0:09:46.017,000 --> 0:09:48,000
what they sense from their neighbors.

208
0:09:48.16,000 --> 0:09:49,000
And then finally,

209
0:09:49.57,000 --> 0:09:53,000
we insist that the robots be agnostic to who their neighbors are.

210
0:09:53.694,000 --> 0:09:55,000
So this is what we call anonymity.

211
0:09:57.258,000 --> 0:10:03,000
So what I want to show you next is a video of 20 of these little robots,

212
0:10:03.699,000 --> 0:10:04,000
flying in formation.

213
0:10:06.144,000 --> 0:10:08,000
They're monitoring their neighbors' positions.

214
0:10:09.064,000 --> 0:10:1,000
They're maintaining formation.

215
0:10:10.99,000 --> 0:10:11,000
The formations can change.

216
0:10:12.794,000 --> 0:10:13,000
They can be planar formations,

217
0:10:14.497,000 --> 0:10:16,000
they can be three-dimensional formations.

218
0:10:17.331,000 --> 0:10:18,000
As you can see here,

219
0:10:18.696,000 --> 0:10:21,000
they collapse from a three-dimensional formation into planar formation.

220
0:10:22.407,000 --> 0:10:23,000
And to fly through obstacles,

221
0:10:23.962,000 --> 0:10:25,000
they can adapt the formations on the fly.

222
0:10:28.026,000 --> 0:10:3,000
So again, these robots come really close together.

223
0:10:30.513,000 --> 0:10:32,000
As you can see in this figure-eight flight,

224
0:10:32.925,000 --> 0:10:33,000
they come within inches of each other.

225
0:10:35.377,000 --> 0:10:39,000
And despite the aerodynamic interactions with these propeller blades,

226
0:10:39.718,000 --> 0:10:41,000
they're able to maintain stable flight.

227
0:10:41.89,000 --> 0:10:47,000
(Applause)

228
0:10:49.246,000 --> 0:10:5,000
So once you know how to fly in formation,

229
0:10:51.269,000 --> 0:10:53,000
you can actually pick up objects cooperatively.

230
0:10:53.509,000 --> 0:10:57,000
So this just shows that we can double, triple, quadruple

231
0:10:58.11,000 --> 0:10:59,000
the robots' strength,

232
0:10:59.292,000 --> 0:11:02,000
by just getting them to team with neighbors, as you can see here.

233
0:11:02.393,000 --> 0:11:06,000
One of the disadvantages of doing that is, as you scale things up --

234
0:11:06.559,000 --> 0:11:08,000
so if you have lots of robots carrying the same thing,

235
0:11:09.147,000 --> 0:11:11,000
you're essentially increasing the inertia,

236
0:11:11.891,000 --> 0:11:13,000
and therefore you pay a price; they're not as agile.

237
0:11:14.978,000 --> 0:11:17,000
But you do gain in terms of payload-carrying capacity.

238
0:11:18.098,000 --> 0:11:21,000
Another application I want to show you -- again, this is in our lab.

239
0:11:21.337,000 --> 0:11:24,000
This is work done by Quentin Lindsey, who's a graduate student.

240
0:11:24.526,000 --> 0:11:26,000
So his algorithm essentially tells these robots

241
0:11:27.17,000 --> 0:11:31,000
how to autonomously build cubic structures

242
0:11:31.266,000 --> 0:11:32,000
from truss-like elements.

243
0:11:34.441,000 --> 0:11:37,000
So his algorithm tells the robot what part to pick up,

244
0:11:38.225,000 --> 0:11:39,000
when, and where to place it.

245
0:11:40.471,000 --> 0:11:41,000
So in this video you see --

246
0:11:41.978,000 --> 0:11:43,000
and it's sped up 10, 14 times --

247
0:11:44.026,000 --> 0:11:47,000
you see three different structures being built by these robots.

248
0:11:47.139,000 --> 0:11:49,000
And again, everything is autonomous,

249
0:11:49.189,000 --> 0:11:5,000
and all Quentin has to do

250
0:11:50.496,000 --> 0:11:53,000
is to give them a blueprint of the design that he wants to build.

251
0:11:56.925,000 --> 0:11:58,000
So all these experiments you've seen thus far,

252
0:11:59.76,000 --> 0:12:,000
all these demonstrations,

253
0:12:01.134,000 --> 0:12:04,000
have been done with the help of motion-capture systems.

254
0:12:05.029,000 --> 0:12:07,000
So what happens when you leave your lab,

255
0:12:07.56,000 --> 0:12:09,000
and you go outside into the real world?

256
0:12:09.922,000 --> 0:12:1,000
And what if there's no GPS?

257
0:12:12.755,000 --> 0:12:16,000
So this robot is actually equipped with a camera,

258
0:12:17.116,000 --> 0:12:19,000
and a laser rangefinder, laser scanner.

259
0:12:20.14,000 --> 0:12:23,000
And it uses these sensors to build a map of the environment.

260
0:12:24.084,000 --> 0:12:27,000
What that map consists of are features --

261
0:12:27.394,000 --> 0:12:3,000
like doorways, windows, people, furniture --

262
0:12:31.289,000 --> 0:12:33,000
and it then figures out where its position is,

263
0:12:33.456,000 --> 0:12:34,000
with respect to the features.

264
0:12:34.881,000 --> 0:12:36,000
So there is no global coordinate system.

265
0:12:37.115,000 --> 0:12:39,000
The coordinate system is defined based on the robot,

266
0:12:39.645,000 --> 0:12:41,000
where it is and what it's looking at.

267
0:12:42.575,000 --> 0:12:44,000
And it navigates with respect to those features.

268
0:12:46.316,000 --> 0:12:47,000
So I want to show you a clip

269
0:12:47.76,000 --> 0:12:5,000
of algorithms developed by Frank Shen and Professor Nathan Michael,

270
0:12:51.736,000 --> 0:12:54,000
that shows this robot entering a building for the very first time,

271
0:12:55.529,000 --> 0:12:57,000
and creating this map on the fly.

272
0:12:58.642,000 --> 0:13:01,000
So the robot then figures out what the features are,

273
0:13:01.824,000 --> 0:13:02,000
it builds the map,

274
0:13:02.999,000 --> 0:13:04,000
it figures out where it is with respect to the features,

275
0:13:05.99,000 --> 0:13:08,000
and then estimates its position 100 times a second,

276
0:13:09.962,000 --> 0:13:12,000
allowing us to use the control algorithms that I described to you earlier.

277
0:13:13.804,000 --> 0:13:17,000
So this robot is actually being commanded remotely by Frank,

278
0:13:18.261,000 --> 0:13:21,000
but the robot can also figure out where to go on its own.

279
0:13:22.125,000 --> 0:13:24,000
So suppose I were to send this into a building,

280
0:13:24.356,000 --> 0:13:26,000
and I had no idea what this building looked like.

281
0:13:26.682,000 --> 0:13:27,000
I can ask this robot to go in,

282
0:13:28.15,000 --> 0:13:29,000
create a map,

283
0:13:30.078,000 --> 0:13:32,000
and then come back and tell me what the building looks like.

284
0:13:32.967,000 --> 0:13:35,000
So here, the robot is not only solving the problem

285
0:13:36.159,000 --> 0:13:38,000
of how to go from point A to point B in this map,

286
0:13:38.817,000 --> 0:13:42,000
but it's figuring out what the best point B is at every time.

287
0:13:43.24,000 --> 0:13:45,000
So essentially it knows where to go

288
0:13:45.318,000 --> 0:13:47,000
to look for places that have the least information,

289
0:13:48.127,000 --> 0:13:49,000
and that's how it populates this map.

290
0:13:50.944,000 --> 0:13:52,000
So I want to leave you with one last application.

291
0:13:54.982,000 --> 0:13:56,000
And there are many applications of this technology.

292
0:13:57.823,000 --> 0:13:59,000
I'm a professor, and we're passionate about education.

293
0:14:00.395,000 --> 0:14:03,000
Robots like this can really change the way we do K-12 education.

294
0:14:04.355,000 --> 0:14:05,000
But we're in Southern California,

295
0:14:06.204,000 --> 0:14:07,000
close to Los Angeles,

296
0:14:08.061,000 --> 0:14:11,000
so I have to conclude with something focused on entertainment.

297
0:14:12.407,000 --> 0:14:13,000
I want to conclude with a music video.

298
0:14:14.265,000 --> 0:14:18,000
I want to introduce the creators, Alex and Daniel, who created this video.

299
0:14:19.003,000 --> 0:14:25,000
(Applause)

300
0:14:25.905,000 --> 0:14:26,000
So before I play this video,

301
0:14:27.363,000 --> 0:14:3,000
I want to tell you that they created it in the last three days,

302
0:14:30.584,000 --> 0:14:31,000
after getting a call from Chris.

303
0:14:32.743,000 --> 0:14:35,000
And the robots that play in the video are completely autonomous.

304
0:14:36.584,000 --> 0:14:39,000
You will see nine robots play six different instruments.

305
0:14:40.697,000 --> 0:14:42,000
And of course, it's made exclusively for TED 2012.

306
0:14:44.533,000 --> 0:14:45,000
Let's watch.

307
0:14:46.824,000 --> 0:14:5,000
(Sound of air escaping from valve)

308
0:14:53.547,000 --> 0:14:56,000
(Music)

309
0:14:56.907,000 --> 0:15:01,000
(Whirring sound)

310
0:15:19.442,000 --> 0:15:25,000
(Music)

311
0:16:24.029,000 --> 0:16:29,000
(Applause) (Cheers)

